#include"Inverse.h"

//逆行列
Matrix4x4 Inverse(const Matrix4x4& m) {
    float abs =
        m.m[0][0] * m.m[1][1] * m.m[2][2] * m.m[3][3]
        + m.m[0][0] * m.m[1][2] * m.m[2][3] * m.m[3][1]
        + m.m[0][0] * m.m[1][3] * m.m[2][1] * m.m[3][2]

        - m.m[0][0] * m.m[1][3] * m.m[2][2] * m.m[3][1]
        - m.m[0][0] * m.m[1][2] * m.m[2][1] * m.m[3][3]
        - m.m[0][0] * m.m[1][1] * m.m[2][3] * m.m[3][2]

        - m.m[0][1] * m.m[1][0] * m.m[2][2] * m.m[3][3]
        - m.m[0][2] * m.m[1][0] * m.m[2][3] * m.m[3][1]
        - m.m[0][3] * m.m[1][0] * m.m[2][1] * m.m[3][2]

        + m.m[0][3] * m.m[1][0] * m.m[2][2] * m.m[3][1]
        + m.m[0][2] * m.m[1][0] * m.m[2][1] * m.m[3][3]
        + m.m[0][1] * m.m[1][0] * m.m[2][3] * m.m[3][2]

        + m.m[0][1] * m.m[1][2] * m.m[2][0] * m.m[3][3]
        + m.m[0][2] * m.m[1][3] * m.m[2][0] * m.m[3][1]
        + m.m[0][3] * m.m[1][1] * m.m[2][0] * m.m[3][2]

        - m.m[0][3] * m.m[1][2] * m.m[2][0] * m.m[3][1]
        - m.m[0][2] * m.m[1][1] * m.m[2][0] * m.m[3][3]
        - m.m[0][1] * m.m[1][3] * m.m[2][0] * m.m[3][2]

        - m.m[0][1] * m.m[1][2] * m.m[2][3] * m.m[3][0]
        - m.m[0][2] * m.m[1][3] * m.m[2][1] * m.m[3][0]
        - m.m[0][3] * m.m[1][1] * m.m[2][2] * m.m[3][0]

        + m.m[0][3] * m.m[1][2] * m.m[2][1] * m.m[3][0]
        + m.m[0][2] * m.m[1][1] * m.m[2][3] * m.m[3][0]
        + m.m[0][1] * m.m[1][3] * m.m[2][2] * m.m[3][0];

    Matrix4x4 result;

    result.m[0][0] = (
        m.m[1][1] * m.m[2][2] * m.m[3][3]
        + m.m[1][2] * m.m[2][3] * m.m[3][1]
        + m.m[1][3] * m.m[2][1] * m.m[3][2]
        - m.m[1][3] * m.m[2][2] * m.m[3][1]
        - m.m[1][2] * m.m[2][1] * m.m[3][3]
        - m.m[1][1] * m.m[2][3] * m.m[3][2]) / abs;

    result.m[0][1] = (
        -m.m[0][1] * m.m[2][2] * m.m[3][3]
        - m.m[0][2] * m.m[2][3] * m.m[3][1]
        - m.m[0][3] * m.m[2][1] * m.m[3][2]
        + m.m[0][3] * m.m[2][2] * m.m[3][1]
        + m.m[0][2] * m.m[2][1] * m.m[3][3]
        + m.m[0][1] * m.m[2][3] * m.m[3][2]) / abs;

    result.m[0][2] = (
        m.m[0][1] * m.m[1][2] * m.m[3][3]
        + m.m[0][2] * m.m[1][3] * m.m[3][1]
        + m.m[0][3] * m.m[1][1] * m.m[3][2]
        - m.m[0][3] * m.m[1][2] * m.m[3][1]
        - m.m[0][2] * m.m[1][1] * m.m[3][3]
        - m.m[0][1] * m.m[1][3] * m.m[3][2]) / abs;

    result.m[0][3] = (
        -m.m[0][1] * m.m[1][2] * m.m[2][3]
        - m.m[0][2] * m.m[1][3] * m.m[2][1]
        - m.m[0][3] * m.m[1][1] * m.m[2][2]
        + m.m[0][3] * m.m[1][2] * m.m[2][1]
        + m.m[0][2] * m.m[1][1] * m.m[2][3]
        + m.m[0][1] * m.m[1][3] * m.m[2][2]
        ) / abs;

    result.m[1][0] = (
        -m.m[1][0] * m.m[2][2] * m.m[3][3]
        - m.m[1][2] * m.m[2][3] * m.m[3][0]
        - m.m[1][3] * m.m[2][0] * m.m[3][2]
        + m.m[1][3] * m.m[2][2] * m.m[3][0]
        + m.m[1][2] * m.m[2][0] * m.m[3][3]
        + m.m[1][0] * m.m[2][3] * m.m[3][2]
        ) / abs;

    result.m[1][1] = (
        m.m[0][0] * m.m[2][2] * m.m[3][3]
        + m.m[0][2] * m.m[2][3] * m.m[3][0]
        + m.m[0][3] * m.m[2][0] * m.m[3][2]
        - m.m[0][3] * m.m[2][2] * m.m[3][0]
        - m.m[0][2] * m.m[2][0] * m.m[3][3]
        - m.m[0][0] * m.m[2][3] * m.m[3][2]
        ) / abs;

    result.m[1][2] = (
        -m.m[0][0] * m.m[1][2] * m.m[3][3]
        - m.m[0][2] * m.m[1][3] * m.m[3][0]
        - m.m[0][3] * m.m[1][0] * m.m[3][2]
        + m.m[0][3] * m.m[1][2] * m.m[3][0]
        + m.m[0][2] * m.m[1][0] * m.m[3][3]
        + m.m[0][0] * m.m[1][3] * m.m[3][2]
        ) / abs;

    result.m[1][3] = (
        m.m[0][0] * m.m[1][2] * m.m[2][3]
        + m.m[0][2] * m.m[1][3] * m.m[2][0]
        + m.m[0][3] * m.m[1][0] * m.m[2][2]
        - m.m[0][3] * m.m[1][2] * m.m[2][0]
        - m.m[0][2] * m.m[1][0] * m.m[2][3]
        - m.m[0][0] * m.m[1][3] * m.m[2][2]
        ) / abs;

    result.m[2][0] = (
        m.m[1][0] * m.m[2][1] * m.m[3][3]
        + m.m[1][1] * m.m[2][3] * m.m[3][0]
        + m.m[1][3] * m.m[2][0] * m.m[3][1]
        - m.m[1][3] * m.m[2][1] * m.m[3][0]
        - m.m[1][1] * m.m[2][0] * m.m[3][3]
        - m.m[1][0] * m.m[2][3] * m.m[3][1]
        ) / abs;

    result.m[2][1] = (
        -m.m[0][0] * m.m[2][1] * m.m[3][3]
        - m.m[0][1] * m.m[2][3] * m.m[3][0]
        - m.m[0][3] * m.m[2][0] * m.m[3][1]
        + m.m[0][3] * m.m[2][1] * m.m[3][0]
        + m.m[0][1] * m.m[2][0] * m.m[3][3]
        + m.m[0][0] * m.m[2][3] * m.m[3][1]
        ) / abs;

    result.m[2][2] = (
        m.m[0][0] * m.m[1][1] * m.m[3][3]
        + m.m[0][1] * m.m[1][3] * m.m[3][0]
        + m.m[0][3] * m.m[1][0] * m.m[3][1]
        - m.m[0][3] * m.m[1][1] * m.m[3][0]
        - m.m[0][1] * m.m[1][0] * m.m[3][3]
        - m.m[0][0] * m.m[1][3] * m.m[3][1]
        ) / abs;

    result.m[2][3] = (
        m.m[0][0] * m.m[1][1] * m.m[2][3]
        + m.m[0][1] * m.m[1][3] * m.m[2][0]
        + m.m[0][3] * m.m[1][0] * m.m[2][1]
        - m.m[0][3] * m.m[1][1] * m.m[2][0]
        - m.m[0][1] * m.m[1][0] * m.m[2][3]
        - m.m[0][0] * m.m[1][3] * m.m[2][1]
        ) / abs;

    result.m[3][0] = (
        -m.m[1][0] * m.m[2][1] * m.m[3][2]
        - m.m[1][1] * m.m[2][2] * m.m[3][0]
        - m.m[1][2] * m.m[2][0] * m.m[3][1]
        + m.m[1][2] * m.m[2][1] * m.m[3][0]
        + m.m[1][1] * m.m[2][0] * m.m[3][2]
        + m.m[1][0] * m.m[2][2] * m.m[3][1]
        ) / abs;
    result.m[3][1] = (

        m.m[0][0] * m.m[2][1] * m.m[3][2]
        + m.m[0][1] * m.m[2][2] * m.m[3][0]
        + m.m[0][2] * m.m[2][0] * m.m[3][1]
        - m.m[0][2] * m.m[2][1] * m.m[3][0]
        - m.m[0][1] * m.m[2][0] * m.m[3][2]
        - m.m[0][0] * m.m[2][2] * m.m[3][1]

        ) / abs;
    result.m[3][2] = (
        -m.m[0][0] * m.m[1][1] * m.m[3][2]
        - m.m[0][1] * m.m[1][2] * m.m[3][0]
        - m.m[0][2] * m.m[1][0] * m.m[3][1]
        + m.m[0][2] * m.m[1][1] * m.m[3][0]
        + m.m[0][1] * m.m[1][0] * m.m[3][2]
        + m.m[0][0] * m.m[1][2] * m.m[3][1]
        ) / abs;

    result.m[3][3] = (
        m.m[0][0] * m.m[1][1] * m.m[2][2]
        + m.m[0][1] * m.m[1][2] * m.m[2][0]
        + m.m[0][2] * m.m[1][0] * m.m[2][1]
        - m.m[0][2] * m.m[1][1] * m.m[2][0]
        - m.m[0][1] * m.m[1][0] * m.m[2][2]
        - m.m[0][0] * m.m[1][2] * m.m[2][1]
        ) / abs;

    return result;
};
